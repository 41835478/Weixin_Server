<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.whayer.wx.wechat.dao.EventDao">
	<!-- 一对一关系 -->
	<sql id="wechatAccountFields">
		id,
		miniprogram_openid,
		official_account_openid,
		unionid,
		msgid,
		create_time
	</sql>
    
    <insert id="saveUnionIdAndOpenId" parameterType="WechatAccount">
    	
   		INSERT INTO sk_wechat_account(
			id,
			<!-- miniprogram_openid, -->
			official_account_openid,
			unionid,
			msgid,
			create_time
			)
		VALUES(
			#{id},
			<!-- #{miniprogramOpenid}, -->
			#{officialAccountOpenid},
			#{unionid},
			#{msgid},
			now()
		)
    </insert>
    
    <select id="isMsgIdIsExist" resultType="Integer">
    	SELECT COUNT(*) 
    	FROM sk_wechat_account 
    	WHERE msgid=#{msgid}
    </select>
    
    <select id="isUnionIdIsExist" resultType="Integer">
    	SELECT COUNT(*) 
    	FROM sk_wechat_account 
    	WHERE unionid=#{unionid}
    </select>
    
    <select id="getWechatAccountByUnionId"  resultType="WechatAccount">
    	SELECT * FROM sk_wechat_account
    	WHERE unionid = #{unionid}
    </select>
    
    <select id="getWechatAccountByMiniProgramOpenId" resultType="WechatAccount">
    	SELECT * FROM sk_wechat_account
    	WHERE miniprogram_openid = #{miniProgramOpenId}
    </select>
    
    <update id="updateMiniProgramOpenId">
    	UPDATE sk_wechat_account 
		    <trim prefix="SET" suffixOverrides=",">
			    <if test="miniprogramOpenid != null and miniprogramOpenid != ''">
			      miniprogram_openid = #{miniprogramOpenid},
			    </if>
		    </trim>
			<where>
		      unionid=#{unionid}
		    </where>
    </update>
    
    <insert id="saveCardInfo" parameterType="CardInfo">
    	INSERT INTO sk_card_info(
			id,
			card_type,
			card_id,
			title,
			description,
			date_type,
			begin_timestamp,
			end_timestamp,
			fixed_term,
			fixed_begin_term,
			status,
			least_cost,
			reduce_cost,
			discount,
			supply_balance,
			supply_bonus,
			bonus_cleared,
			bonus_rules,
			prerogative,
			bind_old_card_url,
			activate_url,
			need_push_on_view,
			notify_date
			)
		VALUES(
			#{id},
			#{cardType},
			#{cardId},
			#{title},
			#{description},
			#{dateType},
			#{beginTimestamp},
			#{endTimestamp},
			#{fixedTerm},
			#{fixedBeginTerm},
			#{status},
			#{leastCost},
			#{reduceCost},
			#{discount},
			#{supplyBalance},
			#{supplyBonus},
			#{bonusCleared},
			#{bonusRules},
			#{prerogative},
			#{bindOldCardUrl},
			#{activateUrl},
			#{needPushOnView},
			now()
		)
    </insert>
    
    <select id="getCardListDetail" resultType="CardInfo">
    	SELECT * FROM sk_card_info
    	where card_id in 
    	(
		  select u.card_id from sk_card_role u where u.user_code=#{role}
		)  
    </select>
    
    <select id="getCardListDetailByCardIds" resultType="CardInfo">
    	SELECT * FROM sk_card_info
    	WHERE card_id IN (
    	<foreach collection="cardIds" item="item" index="index" separator=",">
           #{item}
        </foreach>
        )
    </select>
    
    <!-- 返回List<String> 不要将返回类型定义为List -->
    <select id="getCardIds" resultType="java.lang.String">
    	SELECT card_id FROM sk_card_info
    </select>
    
    <delete id="deleteCardById" parameterType="String">
    	<![CDATA[
   			DELETE FROM sk_card_info WHERE card_id=#{cardId}
   		]]>
    </delete>
    
    <delete id="deleteCardByIds">
    	DELETE from sk_card_info where card_id in
        <foreach collection="cardIds" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>
</mapper>
