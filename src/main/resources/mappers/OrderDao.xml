<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="com.whayer.wx.order.dao.OrderDao">

	<sql id="orderFields">
		id,
		product_id_list,
		user_id,
		coupon_id,
		vouchers_id,<!-- 多个,用逗号分割 -->
		examinee_id,
		amount,
		state,
		is_invoice,
		create_time
	</sql>
	
	<resultMap type="Order" id="allOrderMap">
		<result property="id" column="o_id" /> <!-- 若关联对象有重名,则必须要重命名 -->
	    <result property="productIdList" column="o_product_id_list" />
	    <result property="userId" column="o_user_id" />
	    <result property="couponId" column="o_coupon_id" />
	    <result property="vouchersId" column="o_vouchers_id" />
	    <result property="examineeId" column="o_examinee_id" />
	    <result property="amount" column="o_amount" />
	    <result property="state" column="o_state" />
	    <result property="isInvoice" column="o_is_invoice" />
	    <result property="createTime" column="o_create_time" />
	    
	    <result property="coupon.id" column="c_id" />
	    <result property="coupon.userId" column="c_user_id" />
	    <result property="coupon.amount" column="c_amount" />
	    <result property="coupon.isEffect" column="c_is_effect" />
	    <result property="coupon.isExpired" column="c_is_expired" />
	    <result property="coupon.createDate" column="c_create_date" />
	    <result property="coupon.useDate" column="c_use_date" />
	    <result property="coupon.createUserId" column="c_create_user_id" />
	    
	    <result property="examinee.id" column="e_id" />
	    <result property="examinee.name" column="e_name" />
	    <result property="examinee.age" column="e_age" />
	    <result property="examinee.address" column="e_address" />
	    <result property="examinee.gender" column="e_gender" />
	    <result property="examinee.mobile" column="e_mobile" />
	    <result property="examinee.identityId" column="e_identity_id" />
	    <result property="examinee.birthday" column="e_birthday" />
	    
	    <collection property="products" column="p_id" ofType="Product">
	    	<id property="id" column="p_id" />
		    <result property="name" column="p_name" />
		    <result property="imgUrl" column="p_img_url" />
		    <result property="price" column="p_price" />
		    <result property="description" column="p_description" />
		    <result property="createTime" column="p_create_time" />
	    </collection>
	    
	    <collection property="vouchers" column="v_id" ofType="Voucher">
	    	<id property="id" column="v_id" />
		    <result property="userId" column="v_user_id" />
		    <result property="amount" column="v_amount" />
		    <result property="isEffect" column="v_is_effect" />
		    <result property="isExpired" column="v_is_expired" />
		    <result property="createDate" column="v_create_date" />
		    <result property="useDate" column="v_use_date" />
		    <result property="createUserId" column="v_create_user_id" />
	    </collection>
	</resultMap>

	<select id="getOrderList" resultMap="allOrderMap">
		select 
		o.id as o_id,
		o.product_id_list as o_product_id_list,
		o.user_id as o_user_id,
		o.coupon_id as o_coupon_id,
		o.vouchers_id as o_vouchers_id,
		o.examinee_id as o_examinee_id,
		o.amount as o_amount,
		o.state as o_state,
		o.is_invoice as o_is_invoice,
		o.create_time as o_create_time,
		
		c.id as c_id,
		c.user_id as c_user_id,
		c.amount as c_amount,
		c.is_effect as c_is_effect,
		c.is_expired as c_is_expired,
		c.create_date as c_create_date,
		c.use_date as c_use_date,
		c.create_user_id as c_create_user_id,
		
		e.id as e_id,
		e.name as e_name,
		e.age as e_age,
		e.address as e_address,
		e.gender as e_gender,
		e.mobile as e_mobile,
		e.identity_id as e_identity_id,
		e.birthday as e_birthday,
		
		p.id as p_id,
		p.name as p_name,
		p.img_url as p_img_url,
		p.price as p_price,
		p.description as p_description,
		p.create_time as p_create_time,
		
		v.id as v_id,
		v.user_id as v_user_id,
		v.amount as v_amount,
		v.is_effect as v_is_effect,
		v.is_expired as v_is_expired,
		v.create_date as v_create_date,
		v.use_date as v_use_date,
		v.create_user_id as v_create_user_id
		
		from sk_order o
		left join sk_coupon c    
		     on o.coupon_id = c.id
		left join sk_examinee e
		     on o.examinee_id = e.id
		left join sk_order_voucher ov
		     on o.id = ov.order_id
		left join sk_order_product op
		     on o.id = op.order_id
	    left join sk_voucher v
		     on v.id = ov.voucher_id
		left join sk_product p
		     on p.id = op.product_id 
		<!-- <where>
			<if test="uid != null and id != ''">
				o.user_id =#{uid}
			</if>
		</where> -->    
		<trim prefix="WHERE" prefixOverrides="AND|OR">  
		    <if test="uid != null and uid !='' ">  
		        o.user_id =#{uid}   
		    </if>  
		</trim>	
	</select>
	
	<insert id="save" parameterType="Order">
		insert into sk_order(
  			id,
			product_id_list,
			user_id,
			coupon_id,
			vouchers_id,<!-- 多个,用逗号分割 -->
			examinee_id,
			amount,
			state,
			is_invoice,
			create_time
  		) 
  		values(
  		#{id},
  		#{productIdList},
  		#{userId},
  		#{couponId},
  		#{vouchersId},
  		#{examineeId},
  		#{amount},
  		0,
  		#{isInvoice},
  		now()
  		)
	</insert>
	
	<!-- 通过订单id更新订单状态 -->
	<update id="updateOrderStatusById">
		UPDATE sk_order SET state=#{state}
    	WHERE id=#{id}
	</update>

	<!-- 产品id存入【订单-产品】中间表 -->
	<insert id="saveOrder2Product">
		insert into sk_order_product 
		(
			id,
			order_id,
			product_id
		)
        values
        <foreach collection="pids" item="item" index="index" separator=",">
            (
            	REPLACE(UUID(), '-', ''), 
            	#{orderId},
            	#{item} 
            )
        </foreach>
	</insert>
	
	<!-- 代金劵id存入【订单-代金劵】中间表 -->
	<insert id="saveOrder2Voucher">
		insert into sk_order_voucher 
		(
			id,
			order_id,
			voucher_id
		)
        values
        <foreach collection="vids" item="item" index="index" separator=",">
            (
            	REPLACE(UUID(), '-', ''), 
            	#{orderId},
            	#{item} 
            )
        </foreach>
	</insert>
	
	<select id="getOrderById" resultType="Order">
		SELECT 
		<include refid="orderFields" />
        FROM sk_order
        WHERE id=#{id} 
	</select>
	
	<!-- 查询指定订单的所有详情 -->
	<select id="getOrderDetailById" resultMap="allOrderMap">
		select 
		o.id as o_id,
		o.product_id_list as o_product_id_list,
		o.user_id as o_user_id,
		o.coupon_id as o_coupon_id,
		o.vouchers_id as o_vouchers_id,
		o.examinee_id as o_examinee_id,
		o.amount as o_amount,
		o.state as o_state,
		o.is_invoice as o_is_invoice,
		o.create_time as o_create_time,
		
		c.id as c_id,
		c.user_id as c_user_id,
		c.amount as c_amount,
		c.is_effect as c_is_effect,
		c.is_expired as c_is_expired,
		c.create_date as c_create_date,
		c.use_date as c_use_date,
		c.create_user_id as c_create_user_id,
		
		e.id as e_id,
		e.name as e_name,
		e.age as e_age,
		e.address as e_address,
		e.gender as e_gender,
		e.mobile as e_mobile,
		e.identity_id as e_identity_id,
		e.birthday as e_birthday,
		
		p.id as p_id,
		p.name as p_name,
		p.img_url as p_img_url,
		p.price as p_price,
		p.description as p_description,
		p.create_time as p_create_time,
		
		v.id as v_id,
		v.user_id as v_user_id,
		v.amount as v_amount,
		v.is_effect as v_is_effect,
		v.is_expired as v_is_expired,
		v.create_date as v_create_date,
		v.use_date as v_use_date,
		v.create_user_id as v_create_user_id
		
		from sk_order o
		left join sk_coupon c    
		     on o.coupon_id = c.id
		left join sk_examinee e
		     on o.examinee_id = e.id
		left join sk_order_voucher ov
		     on o.id = ov.order_id
		left join sk_order_product op
		     on o.id = op.order_id
	    left join sk_voucher v
		     on v.id = ov.voucher_id
		left join sk_product p
		     on p.id = op.product_id 
		 
		<trim prefix="WHERE" prefixOverrides="AND|OR">  
		    <if test="id != null and id !='' ">  
		        o.id =#{id}   
		    </if>  
		</trim>	
	</select>
	
	<resultMap type="OrderStatistics" id="orderStatisticsMap">
		<result property="totalFee" column="total_fee" />
	    <result property="unfinishedFee" column="unfinished_fee" />
	    <result property="finishedFee" column="finished_fee" />
	    <result property="unpaidCount" column="unpaid_count" />
	    <result property="unbindBoxCount" column="unbind_box_count" />
	    <result property="unsettledCount" column="unsettled_count" />
	    <result property="settledCount" column="settled_count" />
	</resultMap>
	
	<!-- 个人订单统计 -->
	<select id="getOrderStatisticsByUid" resultMap="orderStatisticsMap">
		SELECT SUM(total_fee) total_fee, 
			   SUM(unfinished_fee) unfinished_fee, 
			   SUM(finished_fee) finished_fee, 
			   SUM(unpaid_count) unpaid_count, 
			   SUM(unbind_box_count) unbind_box_count, 
			   SUM(unsettled_count) unsettled_count, 
			   SUM(settled_count) settled_count
		FROM (
			<!-- 总金额(不包含已取消的订单) -->
			SELECT IFNULL(SUM(amount), 0) total_fee, 0 unfinished_fee, 0 finished_fee, 0 unpaid_count, 0 unbind_box_count, 0 unsettled_count, 0 settled_count
			FROM sk_order WHERE user_id=#{userId} AND state!=3
			
			UNION ALL
			<!-- 未完成金额(未支付/已支付但未绑定检测盒) -->
			SELECT 0 total_fee, IFNULL(SUM(amount), 0) unfinished_fee, 0 finished_fee, 0 unpaid_count, 0 unbind_box_count, 0 unsettled_count, 0 settled_count
			FROM sk_order so 
			WHERE so.user_id=#{userId} AND so.state=1 AND so.id NOT IN (SELECT sod.order_id FROM sk_order_detectionbox sod)
			OR so.state=0 
			<!-- 
			SELETE SUM(amount) amount FROM sk_order so LEFT JOIN sk_order_detectionbox sod ON so.id=sod.order_id 
			WHERE so.user_id=#{userId} AND so.state=1
			-->
			
			UNION ALL
			<!-- 已完成金额(已支付并绑定检测盒/已结算) -->
			SELECT 0 total_fee, 0 unfinished_fee, IFNULL(SUM(amount), 0) finished_fee, 0 unpaid_count, 0 unbind_box_count, 0 unsettled_count, 0 settled_count
			FROM sk_order so 
			WHERE so.user_id=#{userId} AND so.state=1 AND so.id IN (SELECT sod.order_id FROM sk_order_detectionbox sod)
			OR so.state=2 
			 
			UNION ALL
			<!-- 未支付订单数量 -->
			SELECT 0 total_fee, 0 unfinished_fee, 0 finished_fee, COUNT(*) unpaid_count, 0 unbind_box_count, 0 unsettled_count, 0 settled_count 
			FROM sk_order WHERE user_id=#{userId} AND state=0
			
			UNION ALL
			<!-- 未绑定检测盒订单数量(已支付) -->
			SELECT 0 total_fee, 0 unfinished_fee, 0 finished_fee, 0 unpaid_count, COUNT(*) unbind_box_count, 0 unsettled_count, 0 settled_count
			FROM sk_order 
			WHERE user_id=#{userId} AND state=1 AND id NOT IN (SELECT order_id FROM sk_order_detectionbox)
			
			UNION ALL
			<!-- 未结算订单数量(已支付并绑定检测盒) -->
			SELECT 0 total_fee, 0 unfinished_fee, 0 finished_fee, 0 unpaid_count, 0 unbind_box_count, COUNT(*) unsettled_count, 0 settled_count
			FROM sk_order 
			WHERE user_id=#{userId} AND state=1 AND id IN (SELECT order_id FROM sk_order_detectionbox)
			
			UNION ALL
			<!-- 已结算订单数量 -->
			SELECT 0 total_fee, 0 unfinished_fee, 0 finished_fee, 0 unpaid_count, 0 unbind_box_count, 0 unsettled_count, COUNT(*) settled_count
			FROM sk_order 
			WHERE user_id=#{userId} AND state=2
		) t
	</select>
	<!-- 查询一个表中没有存在在另一个表的数据
		SELECT * FROM A 
			WHERE  id  NOT  IN  ( SELECT id FROM B);
			 
			或者
			SELECT * FROM A 
			WHERE 
			    NOT  EXISTS  ( 
			        SELECT 1 
			        FROM B 
			        WHERE B.id = A.id );
			 
			或者
			SELECT 
			  A.* 
			FROM 
			  A  LEFT JOIN B
			    ON (A.id = B.id)
			WHERE
			  b.id  IS  NULL
	 -->
	 
	 <select id="getListByType" resultMap="allOrderMap">
	 	select 
		o.id as o_id,
		o.product_id_list as o_product_id_list,
		o.user_id as o_user_id,
		o.coupon_id as o_coupon_id,
		o.vouchers_id as o_vouchers_id,
		o.examinee_id as o_examinee_id,
		o.amount as o_amount,
		o.state as o_state,
		o.is_invoice as o_is_invoice,
		o.create_time as o_create_time,
		
		c.id as c_id,
		c.user_id as c_user_id,
		c.amount as c_amount,
		c.is_effect as c_is_effect,
		c.is_expired as c_is_expired,
		c.create_date as c_create_date,
		c.use_date as c_use_date,
		c.create_user_id as c_create_user_id,
		
		e.id as e_id,
		e.name as e_name,
		e.age as e_age,
		e.address as e_address,
		e.gender as e_gender,
		e.mobile as e_mobile,
		e.identity_id as e_identity_id,
		e.birthday as e_birthday,
		
		p.id as p_id,
		p.name as p_name,
		p.img_url as p_img_url,
		p.price as p_price,
		p.description as p_description,
		p.create_time as p_create_time,
		
		v.id as v_id,
		v.user_id as v_user_id,
		v.amount as v_amount,
		v.is_effect as v_is_effect,
		v.is_expired as v_is_expired,
		v.create_date as v_create_date,
		v.use_date as v_use_date,
		v.create_user_id as v_create_user_id
		
		from sk_order o
		left join sk_coupon c    
		     on o.coupon_id = c.id
		left join sk_examinee e
		     on o.examinee_id = e.id
		left join sk_order_voucher ov
		     on o.id = ov.order_id
		left join sk_order_product op
		     on o.id = op.order_id
	    left join sk_voucher v
		     on v.id = ov.voucher_id
		left join sk_product p
		     on p.id = op.product_id 
		<!-- <where>
			<if test="uid != null and id != ''">
				o.user_id =#{uid}
			</if>
		</where> -->    
		<!-- <trim prefix="WHERE" prefixOverrides="AND|OR">  
		    <if test="type != null and type !='' and type = '-1'">  
		        o.user_id =#{type}   
		    </if>  
		</trim>	 -->
		<!-- -1:所有订单(包括已取消) 0:未支付 1:未绑定检测盒 2:未结算 3:已结算 -->
		<!-- @see http://blog.csdn.net/chenaini119/article/details/51917263 字符串比较问题 -->
		<where>  
	        <choose>  
	            <when test="type == '-1'.toString()">  
	                 o.user_id=#{userId} 
	            </when >  
	            <when test="type == '0'.toString()">  
	                  o.user_id=#{userId} AND o.state=0 AND o.create_time BETWEEN #{beginTime} AND #{endTime}
	            </when >  
	            <when test="type == '1'.toString()">  
	                  o.user_id=#{userId} AND o.state=1 AND o.id NOT IN (SELECT sod.order_id FROM sk_order_detectionbox sod)
	                  AND o.create_time BETWEEN #{beginTime} AND #{endTime}
	            </when >  
	            <when test="type == '2'.toString()">  
	                  o.user_id=#{userId} AND o.state=1 AND o.id IN (SELECT order_id FROM sk_order_detectionbox)
	                  AND o.create_time BETWEEN #{beginTime} AND #{endTime}
	            </when >
	            <when test="type == '3'.toString()">  
	                  o.user_id=#{userId} AND o.state=2 AND o.create_time BETWEEN #{beginTime} AND #{endTime}
	            </when >
	            <otherwise>  
	            </otherwise>  
	        </choose>  
	    </where>
	 </select>
</mapper>