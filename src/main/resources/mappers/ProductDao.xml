<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.whayer.wx.product.dao.ProductDao">

	<!-- 一对一关系 -->
	<sql id="productFields">
		id,
		name,
		img_url,
		price,
		description,
		create_time,
		is_off
	</sql>
	
	<sql id="product2RoleFields">
		id,
		product_id,
		user_code
	</sql>

	
	<resultMap id="productListMap" type="Product">
        <id property="id" column="id" />
        <result property="name" column="name" />
        <result property="imgUrl" column="img_url" />
        <result property="price" column="price" />
        <result property="description" column="description" />
        <result property="createTime" column="create_time" />
        <result property="isOff" column="is_off" />
    </resultMap>
	
	<select id="getProductList"  resultMap="productListMap" >
        select 
        <include refid="productFields" /> 
        from sk_product
        <where>  
			1=1  
			<if test="name != null and name != ''">
           	 	AND name LIKE CONCAT('%',#{name},'%') 
           	</if>
           	ORDER BY create_time DESC
        </where>
    </select>
    
    <insert id="saveProduct" parameterType="Product">
		<![CDATA[
			insert into sk_product(
				id,
				name,
				img_url,
				price,
				description,
				create_time,
				is_off
				)
				values(
				#{id},
				#{name},
				#{imgUrl},
				#{price},
				#{description},
				now(),
				0
			)
		]]>
	</insert>
	
	<update id="updateProduct" parameterType="Product">
		UPDATE sk_product 
		    <trim prefix="SET" suffixOverrides=",">
			    <if test="name != null and name != ''">
			      name = #{name},
			    </if>
			    <if test="price != null">
			      price = #{price},
			    </if>
			    <if test="description != null">
			      description = #{description},
			    </if>
			    <if test="imgUrl != null and imgUrl != ''">
			      img_url = #{imgUrl},
			    </if>
		    </trim>
			<where>
		      id=#{id}
		    </where>
	</update>
	
	<select id="getProductById" parameterType="String" resultType="Product">
		select
		<include refid="productFields" />
		from sk_product
		where id=#{id}
	</select>
	
	<delete id="deleteProductById" parameterType="String">
		<![CDATA[
			DELETE FROM sk_product WHERE id=#{id}
		]]>
	</delete>
	
	<!-- 打标的产品必定是上架状态的产品 -->
	<select id="getProductListByUserType" resultType="Product">
		<!-- 
			code:  1:个人代理编码 2:区域代理编码 xxx:集团用户编码
		 -->
		select
		<include refid="productFields" /> 
		from sk_product t
		where t.id in 
		(
		  select u.product_id from sk_product_role u where u.user_code=#{code}
		) AND t.is_off=0 
	</select>
	
	<select id="getProductList2Role" resultType="ProductIsSelected">
		<!-- 
			code:  1:个人代理编码 2:区域代理编码 xxx:集团用户编码
		 -->
		select
			<include refid="productFields" />,
			1 as is_selected 
		from sk_product 
		where id in 
		(
		  select u.product_id from sk_product_role u where u.user_code=#{code}
		) AND is_off=0 
		union all
		select
			<include refid="productFields" />,
			0 as is_selected
		from sk_product 
		where id not in 
		(
		  select u.product_id from sk_product_role u where u.user_code=#{code}
		) AND is_off=0 
	</select>
	
	<!-- 产品打标关联 -->
	<insert id="associate">
		insert into sk_product_role 
		(
			<include refid="product2RoleFields" /> 
		)
        values
        <foreach collection="ids" item="item" index="index" separator=",">
            (
            	REPLACE(UUID(), '-', ''), 
            	#{item},
            	#{role} <!--可以使用param1 param2 -->
            )
        </foreach>
	</insert>
	
	<!-- 批量删除产品关联 -->
	<delete id="deleteAssociates">
		DELETE from sk_product_role where product_id in
        <foreach collection="ids" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND user_code=#{role}
	</delete>
	
	<!-- 单个删除产品关联 -->
	<delete id="deleteAssociation" parameterType="String">
		<![CDATA[
			DELETE FROM sk_product_role WHERE product_id=#{id}
		]]>
	</delete>
	
	<update id="updateOnOrOff">
		UPDATE sk_product 
		    <trim prefix="SET" suffixOverrides=",">
			    <if test="isOff != null">
			      is_off = #{isOff},
			    </if>
		    </trim>
			<where>
		      id=#{id}
		    </where>
	</update>
</mapper>